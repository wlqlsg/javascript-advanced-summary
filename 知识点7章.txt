闭包（closure）
 函数与对其词法环境的引用共同构成闭包。
 闭包是由函数以及创建该函数的词法环境组合而成。这个环境包含了这个闭包创建时所需访问的所有局部变量。
闭包的作用
 可通过闭包访问函数作用域内的局部变量
 使函数中的变量被保存在内存中不被释放
闭包的缺点
 由于闭包会使得函数中的变量都被保存在内存中，内存消耗大
 闭包会在父函数外部，改变父函数内部变量的值
this
 this 是被自动定义在所有函数的作用域中一个关键字
 this 是在函数运行期间绑定，与函数定义无关
this 作用
 复用代码，为函数自动引用合适的上下文对象
 提供了一个更加优雅而简便的方式来隐式传递一个对象引用
函数调用形式（4种）
 默认绑定：作为函数直接调用
   定时器函数
   立即执行函数
 隐式绑定：作为对象方法调用
   事件函数
 new绑定：作为构造函数调用
 显示绑定：通过 call/apply 间接调用
 new 绑定 > 显式绑定 > 隐式绑定 > 默认绑定
纯函数：一个函数的输出不受外部环境影响，同时也不影响外部环境时，只关注逻辑运算和数学运算，同一个输入总得到同一个输出。
高阶函数：在封装一个函数时，对于一个不确定的变量，我们使用传递参数的方式来指定。
 在封装一个函数时，对于一个不确定的过程，我们向函数中传入另一个函数来指定。
回调函数（Callback）
 一个函数被作为参数传递给另一个函数（在这里我们把另一个函数叫做“otherFunction”），回调函数在 otherFunction 中被调用。
 回调函数并不会马上被执行。它会在包含它的函数内的某个特定时间点被“回调”（比如定时器）
