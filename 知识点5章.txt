函数定义方式
 通过函数声明的形式来定义
 通过函数表达式的形式来定义
 通过 Function 构造函数实例化的形式来定义
通过 Function 构造函数创建函数
 可以传入任意数量的实参
 最后一个实参为函数体
 函数体中 javascript 语句之间分号隔开
 Function 构造函数创建一个匿名函数
匿名函数
 单独的匿名函数是无法运行的
 可以把匿名函数赋值给变量或立即执行
代理函数名
 是可有可无的"代理"函数名
 代理函数名的作用域是只能在函数的主体( FunctionBody )内部
JavaScript 函数在定义时有固定数目的命名参数，但当调用这个函数时，传递给它的参数数目却可以是任意的。
arguments 对象(双向绑定性）
 代表传入函数的实参
 是函数中的局部变量
 不能显式创建，只有函数调用时才可用
 它是一个类数组对象
类数组对象
 与数组一样具有 length 与 index 属性
 本质确实个 Object
双向绑定特性
 在调用时 arguments 对象与实际传递了值的形参变量发生双向绑定
 arguments 对象中的对应单元会和命名参数建立关联
call() 方法
 语法： fn.call(thisObj，arg1，arg2，...)
 参数： arg1,arg2,...：被调用函数的实参thisObj：将函数对象中的 this 指向 thisObj 对象
 说明：  1. 如果 thisObj 未传递，this 指向全局对象 window
         2. 如果传递为 undefined/null，this 指向全局对象 window
         3. 如果传递为数字，字符串，布尔值，this 指向该原始值的包装对象   
 返回值：与 fn 普通调用相同
 作用：调用函数，并改变函数执行的 this 指向
apply () 方法
 语法： fn.apply(thisObj，[arg1，arg2，...])
 参数： arg1,arg2,...：被调用函数的实参thisObj：将函数对象中的 this 指向 thisObj 对象   
 说明：  1. 如果 thisObj 未传递，this 指向全局对象 window
         2. 如果传递为 undefined/null，this 指向全局对象 window
         3. 如果传递为数字，字符串，布尔值，this 指向该原始值的包装对象  
 返回值：与 fn 普通调用相同
 作用：调用函数，并改变函数执行的 this 指向
bind () 方法
 语法： fn.bind(thisObj，arg1，arg2,...)   
 参数： 当绑定函数调用时，thisObj 参数作为原函数运行时的 this 指向。arg1,arg2,...  当绑定函数被调用时，这些参数加上绑定函数本身的参数会按照顺序作为原函数运行时的参数。（预设参数）
 返回值：返回一个原函数的拷贝（绑定函数），并拥有指定的 this 值和初始参数 

