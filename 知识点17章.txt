事件绑定分为两种：一种是传统事件绑定(内联模型，脚本模型)，一种是现代事件绑定(DOM2级模型)
 内联模型
<button onclick="tell();">弹出提示框</button>
 违反了“内容与行为相分离的原则”，尽量少用
 脚本模型
 document.getElementById('btn').onclick = function(){  }
 实现了“内容与行为相分离”但元素只能绑定一个监听函数
DOM2 模型
 实现了“内容与行为相分离”
 元素可以绑定多个监听函数
 element.addEventListener(type， listener[， useCapture])
 type —— 表示监听事件类型的字符串，不需要加“on”前缀
 listener —— 指定事件触发时执行的函数
 useCapture —— 布尔值，指定事件是否在捕获或冒泡阶段触发
EventTarget 对象
 EventTarget 是一个由可以接收事件的对象实现的接口，并且可以为它们创建侦听器。
 Element，document 和 window 是最常见的事件目标，但是其他对象也可以是事件目标，比如 XMLHttpRequest。
 许多事件目标（包括元素，文档和 window）还支持通过 on... 属性设置事件处理程序。
 addEventListener()
 注册特定事件类型的事件处理程序
 removeEventListener(type，listener)
 删除事件侦听器
 具名函数可删除，匿名函数不可删除
 dispatchEvent()
 向一个指定的事件目标派发一个事件
事件流
 描述从页面接受事件的顺序
当几个都具有事件的元素层叠在一起的时候，那么你点击其中一个元素，并不是只有当前被点击的元素会触发事件，而层叠在你点击范围的所有元素都会触发事件
 事件流包括两种模式：冒泡和捕获
现代浏览器默认情况下都是冒泡模型
IE 不支持捕获，只支持冒泡
JavaScript 中的事件冒泡
 事件按照从目标元素到根元素（document对象）的顺序触发。
 即事件发生的顺序为：button — div — body — html — document
 使用 stopPropagation() 方法阻止事件冒泡
 event.stopPropagation();
 element.addEventListener(type， listener[， useCapture])
 useCapture：布尔值，指定事件是否在捕获或冒泡阶段触发
 true，指定事件在捕获阶段执行
 false，指定事件在冒泡阶段执行，默认
JavaScript引擎线程是单线程
 JavaScript 的主要用途是与用户互动，以及操作 DOM。
 单线程就意味着，所有任务需要排队，前一个任务结束，才会执行后一个任务。如果前一个任务耗时很长，后一个任务就不得不一直等着。
任务可以分成两种，一种是同步任务，另一种是异步任务。
 同步任务指的是，在主线程上排队执行的任务，只有前一个任务执行完毕，才能执行后一个任务；
 异步任务指的是，不进入主线程、而进入"任务队列"（task queue）的任务，只有"任务队列"通知主线程，某个异步任务可以执行了，该任务才会进入主线程执行。
