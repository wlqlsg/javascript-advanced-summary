实例化与内存
 实例化即创建一个实例对象，分配内存
 执行构造函数即对分配的内存空间进行初始化
普通函数返回值
 没有 return 语句，默认返回 undefined
 有 return 语句，则返回 return 后面表达式的值
构造函数返回值
 没有 return 语句，返回 this，即实例对象
 有 return 语句，且返回值为基本数据类型，构造函数会忽略 return 的值，依然返回 this 对象
 有 return 语句，且返回值为引用数据类型，构造函数会返回 return 的值
prototype 属性
 使用者：只有函数才会有 prototype 属性
 创建者：只要创建一个函数 fun，JavaScript 引擎会根据一组特定的	
规则为该函数创建一个对象，并初始化有一个属性 constructor，用来引用该函数。
 作用：我们可以通过 prototype 属性使向对象添加属性和方法
__proto__  属性
 每个实例对象（ object ）都有一个属性 __proto__ 指向它的构造函数的原型对象（prototype ）
 实例对象可以访问这个原型对象中的属性，就像本身拥有该属性一样
原型对象
 可以看做公共容器，把重复的东西放到公共容器
 定义在原型对象上的属性会让它的所有实例对象都共享这个属性，但是不会在每个实例的内部重新定义这个方法，内存占用就比较小
new 运算符
 创建一个空的简单 JavaScript 对象（即 {}）
 该对象会被执行 [[ prototype ]] 连接
 将该对象作为 this 的上下文，并执行构造函数中的代码
 如果构造函数没有返回引用类型，则返回 this 指向的实例对象

