对象分类
 内置对象（native object）
由 ECMAScript 规范定义的对象或构造器对象（数组、函数等）
 宿主对象（host object）
由 JavaScript 解析器所嵌入的宿主环境定义的（如：window、document）
 自定义对象（user-defined object）
运行中的用户自定义 JavaScript 代码创建的对象
属性的种类
 数据属性（Property）
对象中的普通属性，从字符串的键到值的映射，是最常见的属性类型。
 访问器属性（Accessor）
类似于读、写属性的特殊方法，访问器可以计算属性的值。
 内置属性（Internal  property）
只存在于 ECMAScript 语言规范中，不能直接访问，有可能存在间接访问方式。规范将内置属性的键置于方括号中。比[[Scope]]、[[Prototype]]
__proto__可以访问[[Prototype]]
数据属性的特性
 value（属性的值）：对应属性的值
 writable（可写特性）	：确定属性是否可改写性
 configurable（可配置特性）：确定属性是否能删除和其他特性是否可配置
 enumerable（可枚举特性）：属性是否可枚举
属性描述符（property descriptor）
 属性特性描述符是一个用来查看对象属性的特性的对象，该对象包含4个属性，对应4个特性
 封装了属性特性的对象，方便实现数据属性特性的设置和查询
Object.defineProperty(obj, prop, descriptor)
obj —— 要在其上定义属性的对象
prop —— 要定义或修改的属性的名称
descriptor —— 将被定义或修改的属性描述符
value 默认为 undefined
enumerable、writable、configurable 默认为 false
Object.defineProperties(obj, props)
obj
要在其上定义属性的对象
props
要定义属性及属性描述符的对象
Object.getOwnPropertyDescriptor(obj,prop) 方法
 返回指定对象上一个自有属性对应的属性描述符
 obj —— 需要查找的目标对象
 prop —— 目标对象内属性名称
enumerable：枚举性
 一般来说，系统创建的属性不可枚举，而用户创建的属性可枚举通常不应该给内置的对象添加属性和方法。如果需要添加，应该设置属性不可枚举，避免破坏现有代码
 枚举的主要目的是判断 for-in 循环中的那些属性应该被忽略
 枚举性影响的操作
 for-in 循环
 Object.keys()
 JSON.stringify()
obj.propertyIsEnumerable(prop) 
返回一个布尔值，表示指定的属性是否可枚举。
 访问器属性的特性
 get：读取属性时调用的函数，该函数计算读取的结果，默认是 undefined
 set: 设置属性值时调用的函数，该函数接受设置的值作为参数，默认是undefined
 configurable: 确定属性是否能删除和其他特性是否可配置
 enumerable: 属性是否可枚举
